[bed_mesh]
speed: 450
horizontal_move_z: 10
mesh_min: 25, 25
mesh_max: 325, 325
probe_count: 7, 7
fade_start: 0.6
fade_end: 10.0
algorithm: bicubic
zero_reference_position: 175, 175

[quad_gantry_level]
gantry_corners:
    -60,-10
    410,420
points:
    50,25
    50,275
    300,275
    300,25
speed: 450                          # Levelling speed
horizontal_move_z: 5                # Z-axis starting height
retries: 10                         # Number of out-of-tolerance retries
retry_tolerance: 0.01               # Sampling tolerance
max_adjust: 20                      # Maximum adjustment stroke for levelling

[homing_override]
axes: xyz
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set homing_zhop = printer["gcode_macro _USER_VARIABLES"].homing_zhop|float|abs %}
    {% set homing_travel_speed = printer["gcode_macro _USER_VARIABLES"].homing_travel_speed * 60 %}
    {% set homing_travel_accel = printer["gcode_macro _USER_VARIABLES"].homing_travel_accel %}
    {% set z_drop_speed = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    {% set homing_first = printer["gcode_macro _USER_VARIABLES"].homing_first|string|upper %}
    {% set x_homing_backoff, y_homing_backoff = printer["gcode_macro _USER_VARIABLES"].homing_backoff_distance_xy|map('float') %}

    {% set x_position_endstop = printer["configfile"].config["stepper_x"]["position_endstop"]|float %}
    {% set y_position_endstop = printer["configfile"].config["stepper_y"]["position_endstop"]|float %}
    {% set x_position_center = printer.toolhead.axis_maximum.x|int/2 - printer.toolhead.axis_minimum.x|int/2 %}
    {% set y_position_center = printer.toolhead.axis_maximum.y|int/2 - printer.toolhead.axis_minimum.y|int/2 %}


    # reset parameters
    {% set X, Y, Z = False, False, False %}

    STATUS_HOMING

    # which axes have been requested for homing
    {% if not 'X' in params
        and not 'Y' in params
        and not 'Z' in params %}

        {% set X, Y, Z = True, True, True %}

    {% else %}
        {% if 'X' in params %}
            {% set X = True %}
        {% endif %}

        {% if 'Y' in params %}
            {% set Y = True %}
        {% endif %}

        {% if 'Z' in params %}
            {% set Z = True %}
        {% endif %}
    {% endif %}


    # Set the homing acceleration prior to any movement
    {% set saved_accel = printer.toolhead.max_accel %}
    {% set saved_decel = printer.toolhead.max_accel_to_decel %}
    M204 S{homing_travel_accel}
    BED_MESH_CLEAR
    G90

    {% if Z %}
        {% if ('z' in printer.toolhead.homed_axes) %}
            {% if (printer.toolhead.position.z < homing_zhop) %}
                {% if verbose %}
                    { action_respond_info("Z too low, performing ZHOP to rehome Z") }
                {% endif %}
                G91
                G0 Z{homing_zhop} F{z_drop_speed}
                G90
            {% else %}
                {% if verbose %}
                    { action_respond_info("Z already safe, no ZHOP needed to rehome Z") }
                {% endif %}
            {% endif %}
        {% elif ('xy' in printer.toolhead.homed_axes) %}
            {% if verbose %}
                { action_respond_info("X and Y already homed, no ZHOP needed to home Z") }
            {% endif %}
        {% else %}
            {% if verbose %}
                { action_respond_info("X and Y not homed, forcing full G28 to home Z properly") }
            {% endif %}
            SET_KINEMATIC_POSITION X=0 Y=0 Z=0
            G0 Z{homing_zhop} F{z_drop_speed}
            {% set X, Y, Z = True, True, True %}
        {% endif %}
    {% endif %}

    {% if X %} # Home x
        {% if verbose %}
            { action_respond_info("Homing X") }
        {% endif %}
        G28 X0
        G1 X{x_position_endstop + x_homing_backoff} F{homing_travel_speed}
    {% endif %}
    {% if Y %} # Home y
        {% if verbose %}
            { action_respond_info("Homing Y") }
        {% endif %}
        G28 Y0
        G1 Y{y_position_endstop + y_homing_backoff} F{homing_travel_speed}
    {% endif %}

    # Home z
    {% if Z %}
        {% if verbose %}
            { action_respond_info("Homing Z") }
        {% endif %}

        # If there is a virtual probe endstop (ie. TAP or inductive as virtual), we go to the center of the bed
        # If the Z endstop is not virtual, then we just move to it
        # If our virtual endstop is a dockable probe, we need to activate it first
        # If it's the voron tap, we put it to a safe temperature
        # If there is a bed_mesh enabled and a zero_reference_position set, we retrieve it to home on it
        # Else, we default to the center of the bed
        G0 X{x_position_center} Y{y_position_center} F{homing_travel_speed}
        G28 Z0
        G91
        G0 Z{homing_zhop} F{z_drop_speed} # small Z hop to avoid grinding the bed (as we should be close to Z0 right now)
        G90
    {% endif %}

    # Reset acceleration values to what it was before
    SET_VELOCITY_LIMIT ACCEL={saved_accel} ACCEL_TO_DECEL={saved_decel}
    STATUS_READY

[gcode_macro _CG28]
description: Homing only if necessary
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        STATUS_HOMING
        G28
    {% endif %}
    STATUS_READY
    
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _BASE_QUAD_GANTRY_LEVEL
description: Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount
gcode:
    {% set tilting_travel_accel = printer["gcode_macro _USER_VARIABLES"].tilting_travel_accel %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    {% if verbose %}
        { action_respond_info("Quad gantry leveling") }
    {% endif %}
    _CG28

    # Set the tilting acceleration prior to any movement
    {% set saved_accel = printer.toolhead.max_accel %}
    {% set saved_decel = printer.toolhead.max_accel_to_decel %}
    M204 S{tilting_travel_accel}

    _BASE_QUAD_GANTRY_LEVEL {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
    
    # Reset acceleration values to what it was before
    SET_VELOCITY_LIMIT ACCEL={saved_accel} ACCEL_TO_DECEL={saved_decel}